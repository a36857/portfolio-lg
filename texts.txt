Football-Stats 
The Football-Stats was the final project of the Internet Programming class and my first ever project for the web.
It consists in consuming data from a web api that retrieves statics data from some of the european football leagues.
This information includes not only the results from the leagues and their related games, but also about each team and
the players that compose the related team. An user needs to register to access the whole website and then, he can create
groups with his favorite teams for a quicker search on the team results and upcoming games.

The server is done with the NodeJS environment and using the framework ExpressJS to build the web application. The data about
the users and their related groups was stored on a NoSQL database, the CouchDB. The client-side, it was implemented with the
jQuery and the Bootstrap libraries. All the content is rendered server-side with the templating engine Handlebars.
To implement the authentication requirement of the application, it was used the middleware PassportJS using a basic
authentication (local strategy). NOTE: The website is a desktop application only, its still not mobile first.
The web api used has some missing information, it was what we could find as a free RESTful  web service with football statics.



NFOxAPP
This project was my course's final project and it was for the department of neurology of a private clinic in Lisbon.
The goal was to receive Excel files, integrating, cleaning and making them available to a wide range of medical users.
There are two versions of Excel files that can be uploaded: nurses files about patients and laboratory analysis of the patients files.
The application allows downloading the data integrated into a single CSV (Comma-Separated Values) file depending on a timestamp
or get the original uploaded Excel file. The application allows to delete all the data from an uploaded Excel file, but is still
possible to download the original uploaded file.
The application presents statistical information from the data uploaded.

The web application is composed by 4 components: the server application (done with Spring MVC + Thymeleaf), a Message Queue
(RabbitMQ), an ETL Proccess (Pentaho - Kettle) and a database (PostgreSQL).
The client uploads Excel files to the server, the server then sends the information to a message queue and inserts relevant
data about the extraction state of the file in the database. Since we can have ovelap of data, we introduced the message queue
to our stack. When data are inserted on the message queue, the data is sent to the ETL Proccess to extract the information from
the file. When the ETL Proccess finish, the same proccess inserts the data in the database. When the server receives a request
to get all the information on a CSV file, goes to the database and retrieves all the information filtering the information by
the visit date of the patient.




ISSUES-WEB API
The Issues API was the project of Web Applications Development class. The goal was to implement an issues management service
where someone could manage the issues from their projects. The application has a REST API to interact programmatically with
the projects and their related issues, and an UI to interact visually. The application doesn't have authentication mechanisms.

The REST API uses the hypermedia types Collection+JSON and Siren
to represent the context resource and standardized the responses to the clients. The Issues API was implemented using 
the ASP.Net Web API and all the data is stored in the SQL Server database. For the server to communicate with the database,
it was used the Entity Framework. The UI was implemented with Bootstrap and React (it was not used the react-route module).




PORTFOLIO
This simple application was an aside project with the goal to list all the projects that I have done with a web component
and that I could learn how to use the MongoDB and the AngularJS framework. It lists all the projects and shows the details of the selected
project.

The Portfolio application is done with the MEAN Stack (MongoDB, Express, Angular, Node). Since this one is a very simple
project, I built my own version of the stack. The application uses Redis as a cache system, since we can get all the information
faster than trying to get it from MongoDB. The UI uses Bootstrap.